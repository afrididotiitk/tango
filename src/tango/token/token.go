// Code generated by gocc; DO NOT EDIT.

package token

import (
	"fmt"
)

type Token struct {
	Type
	Lit []byte
	Pos
}

type Type int

const (
	INVALID Type = iota
	EOF
)

type Pos struct {
	Offset int
	Line   int
	Column int
}

func (p Pos) String() string {
	return fmt.Sprintf("Pos(offset=%d, line=%d, column=%d)", p.Offset, p.Line, p.Column)
}

type TokenMap struct {
	typeMap []string
	idMap   map[string]Type
}

func (m TokenMap) Id(tok Type) string {
	if int(tok) < len(m.typeMap) {
		return m.typeMap[tok]
	}
	return "unknown"
}

func (m TokenMap) Type(tok string) Type {
	if typ, exist := m.idMap[tok]; exist {
		return typ
	}
	return INVALID
}

func (m TokenMap) TokenString(tok *Token) string {
	//TODO: refactor to print pos & token string properly
	return fmt.Sprintf("%s(%d,%s)", m.Id(tok.Type), tok.Type, tok.Lit)
}

func (m TokenMap) StringType(typ Type) string {
	return fmt.Sprintf("%s(%d)", m.Id(typ), typ)
}

var TokMap = TokenMap{
	typeMap: []string{
		"INVALID",
		"$",
		"assign_op",
		"comma",
		"comment",
		"dot",
		"float_lit",
		"identifier",
		"inc_dec_op",
		"int_lit",
		"keyword_break",
		"keyword_case",
		"keyword_const",
		"keyword_continue",
		"keyword_default",
		"keyword_defer",
		"keyword_else",
		"keyword_fallthrough",
		"keyword_for",
		"keyword_func",
		"keyword_goto",
		"keyword_if",
		"keyword_import",
		"keyword_interface",
		"keyword_map",
		"keyword_package",
		"keyword_range",
		"keyword_return",
		"keyword_struct",
		"keyword_switch",
		"keyword_type",
		"keyword_var",
		"label_op",
		"left_block_bracket",
		"left_paren",
		"left_sq_paren",
		"ops",
		"right_block_bracket",
		"right_paren",
		"right_sq_paren",
		"rune_lit",
		"spread_op",
		"stmt_end",
		"string_literal",
	},

	idMap: map[string]Type{
		"INVALID":             0,
		"$":                   1,
		"assign_op":           2,
		"comma":               3,
		"comment":             4,
		"dot":                 5,
		"float_lit":           6,
		"identifier":          7,
		"inc_dec_op":          8,
		"int_lit":             9,
		"keyword_break":       10,
		"keyword_case":        11,
		"keyword_const":       12,
		"keyword_continue":    13,
		"keyword_default":     14,
		"keyword_defer":       15,
		"keyword_else":        16,
		"keyword_fallthrough": 17,
		"keyword_for":         18,
		"keyword_func":        19,
		"keyword_goto":        20,
		"keyword_if":          21,
		"keyword_import":      22,
		"keyword_interface":   23,
		"keyword_map":         24,
		"keyword_package":     25,
		"keyword_range":       26,
		"keyword_return":      27,
		"keyword_struct":      28,
		"keyword_switch":      29,
		"keyword_type":        30,
		"keyword_var":         31,
		"label_op":            32,
		"left_block_bracket":  33,
		"left_paren":          34,
		"left_sq_paren":       35,
		"ops":                 36,
		"right_block_bracket": 37,
		"right_paren":         38,
		"right_sq_paren":      39,
		"rune_lit":            40,
		"spread_op":           41,
		"stmt_end":            42,
		"string_literal":      43,
	},
}
