// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"tango/src/tango/token"
)

const (
	NoState    = -1
	NumStates  = 194
	NumSymbols = 233
)

type Lexer struct {
	src    []byte
	pos    int
	line   int
	column int
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:    src,
		pos:    0,
		line:   1,
		column: 1,
	}
	return lexer
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	return NewLexer(src), nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = new(token.Token)
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: '/'
1: '/'
2: '"'
3: '`'
4: '''
5: 'b'
6: 'r'
7: 'e'
8: 'a'
9: 'k'
10: 'd'
11: 'e'
12: 'f'
13: 'a'
14: 'u'
15: 'l'
16: 't'
17: 'f'
18: 'u'
19: 'n'
20: 'c'
21: 'i'
22: 'n'
23: 't'
24: 'e'
25: 'r'
26: 'f'
27: 'a'
28: 'c'
29: 'e'
30: 'c'
31: 'a'
32: 's'
33: 'e'
34: 'd'
35: 'e'
36: 'f'
37: 'e'
38: 'r'
39: 'm'
40: 'a'
41: 'p'
42: 's'
43: 't'
44: 'r'
45: 'u'
46: 'c'
47: 't'
48: 'e'
49: 'l'
50: 's'
51: 'e'
52: 'g'
53: 'o'
54: 't'
55: 'o'
56: 'p'
57: 'a'
58: 'c'
59: 'k'
60: 'a'
61: 'g'
62: 'e'
63: 's'
64: 'w'
65: 'i'
66: 't'
67: 'c'
68: 'h'
69: 'c'
70: 'o'
71: 'n'
72: 's'
73: 't'
74: 'f'
75: 'a'
76: 'l'
77: 'l'
78: 't'
79: 'h'
80: 'r'
81: 'o'
82: 'u'
83: 'g'
84: 'h'
85: 'i'
86: 'f'
87: 'r'
88: 'a'
89: 'n'
90: 'g'
91: 'e'
92: 't'
93: 'y'
94: 'p'
95: 'e'
96: 'c'
97: 'o'
98: 'n'
99: 't'
100: 'i'
101: 'n'
102: 'u'
103: 'e'
104: 'f'
105: 'o'
106: 'r'
107: 'i'
108: 'm'
109: 'p'
110: 'o'
111: 'r'
112: 't'
113: 'r'
114: 'e'
115: 't'
116: 'u'
117: 'r'
118: 'n'
119: 'v'
120: 'a'
121: 'r'
122: '.'
123: '.'
124: '''
125: '''
126: '+'
127: '+'
128: '-'
129: '-'
130: '.'
131: '.'
132: '.'
133: '{'
134: '}'
135: '('
136: ')'
137: '['
138: ']'
139: ':'
140: ';'
141: ','
142: '.'
143: '\n'
144: '_'
145: '0'
146: '0'
147: '0'
148: 'x'
149: 'X'
150: 'e'
151: 'E'
152: '+'
153: '-'
154: '"'
155: '`'
156: '''
157: '`'
158: '\'
159: '\'
160: 'x'
161: '\'
162: 'a'
163: 'b'
164: 'f'
165: 'n'
166: 'r'
167: 't'
168: 'v'
169: '\'
170: '"'
171: '''
172: '`'
173: '"'
174: '''
175: '`'
176: '"'
177: '"'
178: '|'
179: '|'
180: '&'
181: '&'
182: '='
183: '='
184: '!'
185: '='
186: '<'
187: '<'
188: '='
189: '>'
190: '>'
191: '='
192: '+'
193: '-'
194: '|'
195: '^'
196: '*'
197: '/'
198: '%'
199: '<'
200: '<'
201: '>'
202: '>'
203: '&'
204: '&'
205: '^'
206: '+'
207: '-'
208: '!'
209: '^'
210: '*'
211: '&'
212: '='
213: ':'
214: '='
215: ' '
216: '\t'
217: '\n'
218: '\r'
219: \u0000-'\t'
220: '\v'-'!'
221: '#'-'&'
222: '('-'Y'
223: 'a'-\u00ff
224: 'a'-'z'
225: 'A'-'Z'
226: '0'-'9'
227: '1'-'9'
228: '0'-'7'
229: '0'-'9'
230: 'A'-'F'
231: 'a'-'f'
232: .
*/
